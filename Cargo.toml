[package]
edition = "2021"
name = "rxy_ui"
version = "0.1.0"

[dependencies]
rxy_core.workspace = true
rxy_macro.workspace = true
rxy_bevy_macro = { workspace = true, optional = true }
hooked_collection = { workspace = true, optional = true }

xy_reactive = { workspace = true, optional = true }

rxy_bevy = { workspace = true, optional = true }
bevy_mod_picking = { workspace = true, optional = true }

rxy_web_dom = { workspace = true, optional = true }
rxy_native = { workspace = true, optional = true }
bevy_color = { workspace = true }
#rxy_bevy_ecs = { path = "crates/rxy_bevy_ecs", optional = true }

[features]
default = ["std", "dynamic_element", "x_iter_source", "signal"]

#web = ["std", "rxy_web_dom"]

std = ["rxy_core/async-channel"]
x_iter_source = ["dep:hooked_collection", "rxy_core/x_iter_source"]
view_children_erasure = ["rxy_core/view_children_erasure"]
tailwind_aliases = ["rxy_bevy/tailwind_aliases"]
style = ["rxy_bevy/style", "rxy_core/style"]
signal = ["xy_reactive", "rxy_core/xy_reactive", "rxy_bevy?/xy_reactive"]
#reflect = ["rxy_core/bevy_reflect", "rxy_native?/reflect", "rxy_bevy_ecs?/reflect"]
reflect = ["rxy_native?/reflect"]

bevy = [
    "std", "rxy_bevy", "bevy_mod_picking", "rxy_bevy_macro", "style", "tailwind_aliases",
    "xy_reactive?/bevy", "rxy_core/bevy", "reflect", "flexbox", "grid"
]
#web = ["std", "rxy_web_dom"]
native = ["std", "rxy_native", "rxy_native/tokio"]
dynamic_element = ["rxy_bevy/dynamic_element", "rxy_core/dynamic_element"]
grid = ["rxy_bevy?/grid", "rxy_native?/grid"]
flexbox = ["rxy_bevy?/flexbox", "rxy_native?/flexbox"]

[workspace]
members = ["crates/*", "examples/native_playground"]

[workspace.dependencies]
hooked_collection = { path = "crates/hooked_collection", default-features = false }
rxy_bevy = { path = "crates/rxy_bevy", default-features = false }
rxy_bevy_macro = { path = "crates/rxy_bevy_macro", default-features = false }
rxy_core = { path = "crates/rxy_core", default-features = false }
rxy_macro = { path = "crates/rxy_macro", default-features = false }
xy_reactive = { path = "crates/xy_reactive", default-features = false }
rxy_web_dom = { path = "crates/rxy_web_dom", default-features = false }
rxy_native = { path = "crates/rxy_native" }

async-channel = { version = "2.1" }
glam = { version = "0.27", features = ["mint", "std"] }
async-broadcast = "0.7.0"
#event-listener = "5.2"
hashbrown = "0.14"
indexmap = "2.1"
once_cell = { version = "1.19", default-features = false }
oneshot = "0.1"
pin-project = { version = "1" }
serde = { version = "1", features = ["derive"] }

ahash = { version = "0.8", default-features = false }
bevy_mod_picking = { version = "0.20", default-features = false, features = ["backend_bevy_ui"] }
derive_more = "0.99"
drain_filter_polyfill = "0.1"
futures-lite = "1.13"
pin-project-lite = { version = "0.2" }
thiserror = "1.0"

smallvec = "1.13"
slotmap = "1"

bevy_app = { version = "0.14" }
bevy_asset = { version = "0.14", optional = false }
bevy_core = { version = "0.14" }
bevy_derive = { version = "0.14" }
bevy_ecs = { version = "0.14", default-features = false }
bevy_hierarchy = { version = "0.14", default-features = false }
bevy_reflect = { version = "0.14", default-features = false }
bevy_render = { version = "0.14" }
bevy_sprite = { version = "0.14" }
bevy_tasks = { version = "0.14", features = ["multi_threaded"], optional = false }
bevy_text = { version = "0.14", optional = false }
bevy_transform = { version = "0.14", optional = false }
bevy_ui = { version = "0.14", features = ["bevy_text"] }
bevy_utils = { version = "0.14" }
bevy_a11y = { version = "0.14" }
bevy_input = { version = "0.14" }
bevy_window = { version = "0.14" }
bevy_color = { version = "0.14" }

count-macro = "0.2.2"
paste = "1"

bitflags = "2.4"
convert_case = "^0.6.0"
proc-macro2 = "1.0.66"
quote = "^1.0.26"
syn = { version = "2", features = ["full"] }

wasm-bindgen-futures = { version = "0.4" }
web-sys = { version = "0.3", features = [
    "Window",
    "Document",
    "HtmlElement",
    "HtmlInputElement",
    "Element",
    "Event",
    "console",
    "Comment",
    "Text",
    "Node",
    "HtmlTemplateElement",
    "DocumentFragment",
    "DomTokenList",
    "CssStyleDeclaration",
    #    "ShadowRoot",

    # Events we cast to in leptos_macro -- added here so we don't force users to import them
    #    "AddEventListenerOptions",
    #    "AnimationEvent",
    #    "BeforeUnloadEvent",
    #    "ClipboardEvent",
    #    "CompositionEvent",
    #    "CustomEvent",
    #    "DeviceMotionEvent",
    #    "DeviceOrientationEvent",
    #    "DragEvent",
    #    "ErrorEvent",
    #    "Event",
    #    "FocusEvent",
    #    "GamepadEvent",
    #    "HashChangeEvent",
    #    "InputEvent",
    #    "KeyboardEvent",
    #    "MessageEvent",
    #    "MouseEvent",
    #    "PageTransitionEvent",
    #    "PointerEvent",
    #    "PopStateEvent",
    #    "ProgressEvent",
    #    "PromiseRejectionEvent",
    #    "SecurityPolicyViolationEvent",
    #    "StorageEvent",
    #    "SubmitEvent",
    #    "TouchEvent",
    #    "TransitionEvent",
    #    "UiEvent",
    #    "WheelEvent",

    # HTML Element Types
    "HtmlHtmlElement",
    "HtmlBaseElement",
    "HtmlHeadElement",
    "HtmlLinkElement",
    "HtmlMetaElement",
    "HtmlStyleElement",
    "HtmlTitleElement",
    "HtmlBodyElement",
    "HtmlHeadingElement",
    "HtmlQuoteElement",
    "HtmlDivElement",
    "HtmlDListElement",
    "HtmlHrElement",
    "HtmlLiElement",
    "HtmlOListElement",
    "HtmlParagraphElement",
    "HtmlPreElement",
    "HtmlUListElement",
    "HtmlAnchorElement",
    "HtmlBrElement",
    "HtmlDataElement",
    "HtmlQuoteElement",
    "HtmlSpanElement",
    "HtmlTimeElement",
    "HtmlAreaElement",
    "HtmlAudioElement",
    "HtmlImageElement",
    "HtmlMapElement",
    "HtmlTrackElement",
    "HtmlVideoElement",
    "HtmlEmbedElement",
    "HtmlIFrameElement",
    "HtmlObjectElement",
    "HtmlParamElement",
    "HtmlPictureElement",
    "HtmlSourceElement",
    "SvgElement",
    "HtmlCanvasElement",
    "HtmlScriptElement",
    "HtmlModElement",
    "HtmlTableCaptionElement",
    "HtmlTableColElement",
    "HtmlTableColElement",
    "HtmlTableElement",
    "HtmlTableSectionElement",
    "HtmlTableCellElement",
    "HtmlTableSectionElement",
    "HtmlTableCellElement",
    "HtmlTableSectionElement",
    "HtmlTableRowElement",
    "HtmlButtonElement",
    "HtmlDataListElement",
    "HtmlFieldSetElement",
    "HtmlFormElement",
    "HtmlInputElement",
    "HtmlLabelElement",
    "HtmlLegendElement",
    "HtmlMeterElement",
    "HtmlOptGroupElement",
    "HtmlOutputElement",
    "HtmlProgressElement",
    "HtmlSelectElement",
    "HtmlTextAreaElement",
    "HtmlDetailsElement",
    "HtmlDialogElement",
    "HtmlMenuElement",
    "HtmlSlotElement",
    "HtmlTemplateElement",
    "HtmlOptionElement",
] }

[dev-dependencies]
bevy = { version = "0.14", features = [
    "dynamic_linking",
    #    "animation",
    "bevy_asset", #    "bevy_audio",  #    "bevy_gilrs",
    #    "bevy_scene",
    "bevy_winit",
    #    "bevy_core_pipeline", # "bevy_pbr",   #  "bevy_gltf",
    "bevy_render",
    #    "bevy_sprite",
    "bevy_text",
    "bevy_ui",
    "multi_threaded", #    "png",  #    "hdr",  #    "vorbis",  #    "x11",  #    "bevy_gizmos",  #    "android_shared_stdcxx",  #    "tonemapping_luts",
    "default_font", #    "webgl2",
] }
#bevy-inspector-egui = "0.23"
rxy_ui = { path = ".", default-features = false }
oneshot.workspace = true
ahash.workspace = true
async-channel.workspace = true
futures-lite.workspace = true
pin-project-lite.workspace = true

# cosmic-text = {version = "0.10"}
[[example]]
doc-scrape-examples = true
name = "game_menu"
path = "examples/game_ui_challenges/game_menu.rs"
required-features = ["bevy"]

[[example]]
doc-scrape-examples = true
name = "inventory"
path = "examples/game_ui_challenges/inventory.rs"
required-features = ["bevy"]

[[example]]
doc-scrape-examples = true
name = "counter"
path = "examples/counter.rs"
required-features = ["bevy"]

[[example]]
doc-scrape-examples = true
name = "counter_by_channel"
path = "examples/counter_by_channel.rs"
required-features = ["bevy"]

[[example]]
doc-scrape-examples = true
name = "if_else"
path = "examples/if_else.rs"
required-features = ["bevy"]

[[example]]
doc-scrape-examples = true
name = "iter_source"
path = "examples/iter_source.rs"
required-features = ["bevy"]

[[example]]
doc-scrape-examples = true
name = "style"
path = "examples/style.rs"
required-features = ["bevy"]

[[example]]
doc-scrape-examples = true
name = "playground"
path = "examples/playground.rs"
required-features = ["bevy"]
